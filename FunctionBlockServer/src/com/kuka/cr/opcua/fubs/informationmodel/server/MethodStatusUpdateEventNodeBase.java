/**
 * Prosys OPC UA Java SDK
 *
 * Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
 * All rights reserved.
 */

/**
 * DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package com.kuka.cr.opcua.fubs.informationmodel.server;

import com.prosysopc.ua.StatusException;
import com.prosysopc.ua.nodes.UaVariable;
import com.prosysopc.ua.server.NodeManagerUaNode;
import org.opcfoundation.ua.builtintypes.LocalizedText;
import org.opcfoundation.ua.builtintypes.NodeId;
import org.opcfoundation.ua.builtintypes.QualifiedName;

import com.prosysopc.ua.types.opcua.server.BaseEventTypeNode;
import com.kuka.cr.opcua.fubs.informationmodel.MethodStatusUpdateEvent;
import com.prosysopc.ua.types.opcua.server.BaseDataVariableTypeNode;
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;

  
public abstract class MethodStatusUpdateEventNodeBase extends BaseEventTypeNode implements MethodStatusUpdateEvent {
  
  protected MethodStatusUpdateEventNodeBase(NodeManagerUaNode nodeManager, NodeId nodeId, QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }
  
  @Override
  public void afterCreate(){
    super.afterCreate();
    
    // Call afterCreate for each sub-node (if the node has any)
    callAfterCreateIfExists(getStatusNode());
  
  }


  @Mandatory
  @Override
  public BaseDataVariableTypeNode getStatusNode() {
  	QualifiedName browseName = getQualifiedName("http://kuka.com/fubs", "status");
  	return (BaseDataVariableTypeNode) getComponent(browseName);
  }
  @Mandatory
  @Override
  public Short getStatus() {
  	UaVariable node = getStatusNode();
  	if (node == null)
  		return null;	
  	Object value = node.getValue().getValue().getValue();	
  	return (Short) value;
  }
  @Mandatory
  @Override
  public void setStatus(Short value) {
  	UaVariable node = getStatusNode();
  	if (node==null){
  		throw new RuntimeException("Setting Status failed: does not exist (Optional Nodes must be configured in NodeBuilder)");
  	}      
  	try {
  		node.setValue(value);
  	} catch(StatusException e) {
  	throw new RuntimeException("Setting Status failed unexpectedly",e);
  	}
  }

 

}
