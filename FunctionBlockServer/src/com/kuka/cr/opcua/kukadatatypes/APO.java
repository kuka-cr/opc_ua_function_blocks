/**
* Prosys OPC UA Java SDK
*
* Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
* All rights reserved.
*/

/**
* DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package com.kuka.cr.opcua.kukadatatypes;

import com.prosysopc.ua.TypeDefinitionId;
import org.opcfoundation.ua.builtintypes.ExpandedNodeId;
import org.opcfoundation.ua.builtintypes.Structure;
import org.opcfoundation.ua.utils.ObjectUtils;
import java.util.*;

    /**
        * Blending parameters
    */
@TypeDefinitionId("nsu=http://kuka.com/kuka_datatypes/;i=3004")
public class APO implements Structure, Cloneable {
    public static ExpandedNodeId BINARY = ExpandedNodeId.parseExpandedNodeId("nsu=http://kuka.com/kuka_datatypes/;i=5005");
    public static ExpandedNodeId ID = ExpandedNodeId.parseExpandedNodeId("nsu=http://kuka.com/kuka_datatypes/;i=3004");
    public static ExpandedNodeId XML = ExpandedNodeId.parseExpandedNodeId("nsu=http://kuka.com/kuka_datatypes/;i=5006");

    protected Short PTP_MODE;
    protected Short CP_MODE;
    protected Short CPTP;
    protected Double CDIS;
    protected Double CORI;
    protected Short CVEL;

	public APO() {}

	public APO(Short PTP_MODE, Short CP_MODE, Short CPTP, Double CDIS, Double CORI, Short CVEL)
	{
		this.PTP_MODE = PTP_MODE;
		this.CP_MODE = CP_MODE;
		this.CPTP = CPTP;
		this.CDIS = CDIS;
		this.CORI = CORI;
		this.CVEL = CVEL;
	}

	public Short getPTP_MODE() {
		return PTP_MODE;
	}

	public void setPTP_MODE(Short PTP_MODE) {
		this.PTP_MODE = PTP_MODE;
	}

	public Short getCP_MODE() {
		return CP_MODE;
	}

	public void setCP_MODE(Short CP_MODE) {
		this.CP_MODE = CP_MODE;
	}

	public Short getCPTP() {
		return CPTP;
	}

	public void setCPTP(Short CPTP) {
		this.CPTP = CPTP;
	}

	public Double getCDIS() {
		return CDIS;
	}

	public void setCDIS(Double CDIS) {
		this.CDIS = CDIS;
	}

	public Double getCORI() {
		return CORI;
	}

	public void setCORI(Double CORI) {
		this.CORI = CORI;
	}

	public Short getCVEL() {
		return CVEL;
	}

	public void setCVEL(Short CVEL) {
		this.CVEL = CVEL;
	}


	/**
	* Deep clone
	*
	* @return cloned APO
	*/
	public APO clone()
	{
		APO result = new APO();
		result.PTP_MODE = PTP_MODE;
		result.CP_MODE = CP_MODE;
		result.CPTP = CPTP;
		result.CDIS = CDIS;
		result.CORI = CORI;
		result.CVEL = CVEL;
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		APO other = (APO) obj;
		if (PTP_MODE==null) {
			if (other.PTP_MODE != null) 
				return false;
		} 
		else if (!PTP_MODE.equals(other.PTP_MODE)) 
			return false;
		if (CP_MODE==null) {
			if (other.CP_MODE != null) 
				return false;
		} 
		else if (!CP_MODE.equals(other.CP_MODE)) 
			return false;
		if (CPTP==null) {
			if (other.CPTP != null) 
				return false;
		} 
		else if (!CPTP.equals(other.CPTP)) 
			return false;
		if (CDIS==null) {
			if (other.CDIS != null) 
				return false;
		} 
		else if (!CDIS.equals(other.CDIS)) 
			return false;
		if (CORI==null) {
			if (other.CORI != null) 
				return false;
		} 
		else if (!CORI.equals(other.CORI)) 
			return false;
		if (CVEL==null) {
			if (other.CVEL != null) 
				return false;
		} 
		else if (!CVEL.equals(other.CVEL)) 
			return false;
		return true;
	}
	
	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result
			+ ((PTP_MODE == null) ? 0 : PTP_MODE.hashCode())
			+ ((CP_MODE == null) ? 0 : CP_MODE.hashCode())
			+ ((CPTP == null) ? 0 : CPTP.hashCode())
			+ ((CDIS == null) ? 0 : CDIS.hashCode())
			+ ((CORI == null) ? 0 : CORI.hashCode())
			+ ((CVEL == null) ? 0 : CVEL.hashCode())
		;
		return result;
	}
    	
	public String toString() {
		return "APO: "+ObjectUtils.printFieldsDeep(this);
	}

	public ExpandedNodeId getTypeId() {
		return ID;
	}

	public ExpandedNodeId getXmlEncodeId() {
		return XML;
	}

	public ExpandedNodeId getBinaryEncodeId() {
		return BINARY;
	}
}
