{:targets [:ObjectType]
 :package ".client"
 :name "ImplBase"}
---
/**
 * Prosys OPC UA Java SDK
 *
 * Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
 * All rights reserved.
 */

/**
 * DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package {{package}};

{{#dependencies}}
import {{package}}.{{class}};
{{/dependencies}}
import {{supertype.package}}.client.{{supertype.type}}Impl;
import {{raw-package}}.{{symbolicname}};

import org.opcfoundation.ua.builtintypes.ServiceResponse;
import org.opcfoundation.ua.transport.AsyncResult;

import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;
  
{{#description?}}
/**
{{#description}}
 * {{.}}
{{/description}}
 */
{{/description?}}
public abstract class {{classname}} extends {{supertype.type}}Impl implements {{symbolicname}} {
	protected {{classname}}(AddressSpace addressSpace, NodeId nodeId, QualifiedName browseName, LocalizedText displayName) {
		super(addressSpace, nodeId, browseName, displayName);
	}
  
{{#properties}}
	{{>property_node_getter}}

	{{>property_value_getter}}

	{{>value_setter}}

{{/properties}}

{{#datavariables}}
	{{> node_getter}}

	{{> value_getter}}

	{{> value_setter}}

{{/datavariables}}

{{#objects}}
	{{> node_getter}}
	
{{/objects}}	

{{#methods}}
	/* private volatile NodeId {{> variable}}MethodId = null; */
	private NodeId get{{> Variable}}MethodId() {
		return getComponentId(getQualifiedName("{{browsename.namespace}}", "{{browsename.name}}"));
		/*
		 * Uncomment this and the field above to enable caching the methodId
		if ({{> variable}}MethodId == null) {
			QualifiedName qualifiedName = getQualifiedName("{{browsename.namespace}}", "{{browsename.name}}");
			{{> variable}}MethodId = getComponentId(qualifiedName);
		}
		return {{> variable}}MethodId;
		*/
	}

	@Override
	public {{return-value}} {{> variable}}({{#inargs}}{{type}}{{#array?}}[]{{/array?}} {{> variable}}{{^last?}}, {{/last?}}{{/inargs}}) throws MethodCallStatusException, ServiceException {
		Object[] inArgs = {
			{{#inargs}}
			{{> variable}}{{^last?}},{{/last?}}
			{{/inargs}}
		};
		{{^no-outargs?}}Object[] results = {{/no-outargs?}}callMethod(get{{> Variable}}MethodId(), inArgs);
		{{^no-outargs?}}
		{{#one-outarg?}}
		{{#outargs}}
		return ({{type}}{{#array?}}[]{{/array?}})results[0];
		{{/outargs}}
		{{/one-outarg?}}
		{{#many-outargs?}}
		return new {{return-value}} {
		{{#outargs}}
		({{type}}{{#array?}}[]{{/array?}}) results[{{index}}]{{^last?}},{{/last?}}
		{{/outargs}}
		};
		{{/many-outargs?}}
		{{/no-outargs?}}
	}
	
	public AsyncResult<Object[]> {{> variable}}Async({{#inargs}}{{type}}{{#array?}}[]{{/array?}} {{> variable}}{{^last?}}, {{/last?}}{{/inargs}}) {
		Object[] inArgs = {
			{{#inargs}}
			{{> variable}}{{^last?}},{{/last?}}
			{{/inargs}}
		};
		return callAsync(get{{> Variable}}MethodId(), inArgs);
	}	
{{/methods}}
}
