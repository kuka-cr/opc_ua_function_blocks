{:targets [:ObjectType]
 :package ".server"
 :name "Node"
 :overwrite? false}
---
/**
 * Prosys OPC UA Java SDK
 *
 * Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
 * All rights reserved.
 */

package {{package}};

{{#dependencies}}
import {{package}}.{{class}};
{{/dependencies}}
  
{{#description?}}
/**
{{#description}}
 * {{.}}
{{/description}}
 */
{{/description?}}
@TypeDefinitionId("nsu={{nodeid.namespace}};{{nodeid.id}}")
public class {{classname}} extends {{classname}}Base {
  
  /** 
   * NodeBuilder uses this, you should not call this yourself. 
   */
  protected {{classname}}(NodeManagerUaNode nodeManager, NodeId nodeId, QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }

  @Override
  public void afterCreate(){
    // Use this method to initialize the nodes, when they are all created.
    // Note that 'super.afterCreate()' performs default initializations, so consider
    // whether your own initializations should be done before or after it.
    super.afterCreate();
  }

  {{#methods}}

  @Override
  protected {{return-value}} on{{> Variable}}(ServiceContext serviceContext{{#inargs}}, {{type}}{{#array?}}[]{{/array?}} {{> variable}}{{/inargs}}) throws StatusException {
    {{#outargs}}
    {{type}}{{#array?}}[]{{/array?}} {{> variable}} = null;
    {{/outargs}}
    //TODO: Implement the generated method
    throw new StatusException(StatusCodes.Bad_NotImplemented);
    {{^no-outargs?}}
    // TODO: Uncomment the return statement, when you have implemented the method
    {{#one-outarg?}}
    {{#outargs}}
    // return {{> variable}};
    {{/outargs}}
    {{/one-outarg?}}
    {{#many-outargs?}}
    /*
    return new {{return-value}} {
      {{#outargs}}
      {{> variable}}{{^last?}},{{/last?}}
      {{/outargs}}
    };
    */
    {{/many-outargs?}}
    {{/no-outargs?}}
  }
  {{/methods}}

}
