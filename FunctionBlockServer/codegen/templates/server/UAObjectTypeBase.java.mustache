{:targets [:ObjectType]
 :package ".server"
 :name "NodeBase"}
---
/**
 * Prosys OPC UA Java SDK
 *
 * Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
 * All rights reserved.
 */

/**
 * DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package {{package}};

{{#dependencies}}
import {{package}}.{{class}};
{{/dependencies}}

import {{supertype.package}}.server.{{supertype.type}}Node;
import {{raw-package}}.{{symbolicname}};
{{#objects}}
import {{typedefinition.package}}.server.{{type}}Node;
{{/objects}}
{{#datavariables}}
import {{typedefinition.package}}.server.{{type}}Node;
{{/datavariables}}
import com.prosysopc.ua.nodes.Mandatory;
import com.prosysopc.ua.nodes.Optional;

  
{{#description?}}
/**
{{#description}}
 * {{.}}
{{/description}}
 */
{{/description?}}
public abstract class {{classname}} extends {{supertype.type}}Node implements {{symbolicname}} {
  
  protected {{classname}}(NodeManagerUaNode nodeManager, NodeId nodeId, QualifiedName browseName, LocalizedText displayName) {
    super(nodeManager, nodeId, browseName, displayName);
  }
  
  @Override
  public void afterCreate(){
    super.afterCreate();
    
    // Call afterCreate for each sub-node (if the node has any)
    {{#datavariables}}
    {{#mandatory?}}
    callAfterCreateIfExists(get{{> Variable}}Node());
    {{/mandatory?}}
    {{#optional?}}
    callAfterCreateIfExists(get{{> Variable}}Node());
    {{/optional?}}  
    {{/datavariables}}
    {{#objects}}
    {{#mandatory?}}
    callAfterCreateIfExists(get{{> Variable}}Node());
    {{/mandatory?}}
    {{#optional?}}
    callAfterCreateIfExists(get{{> Variable}}Node());
    {{/optional?}}
    {{/objects}}
  }

{{#properties}}
  {{>property_node_getter}}

  {{>property_value_getter}}

  {{>value_setter}}

{{/properties}}

{{#datavariables}}
  {{> node_getter}}

  {{> value_getter}}

  {{> value_setter}}

{{/datavariables}}

{{#objects}}
  {{> node_getter}}

{{/objects}} 

{{#methods?}}
  @Override
  public Variant[] callMethod(ServiceContext serviceContext, NodeId methodId,
      Variant[] inputArguments, StatusCode[] inputArgumentResults,
      DiagnosticInfo[] inputArgumentDiagnosticInfos)
      throws StatusException {
    QualifiedName browseName;
    UaNode component;
    {{#methods}}
    browseName = getQualifiedName("{{browsename.namespace}}", "{{browsename.name}}");
    component = getComponent(browseName);
    if (component != null && component.getNodeId().equals(methodId)) {
      {{^no-outargs?}}{{return-value}} returnValue = {{/no-outargs?}}on{{> Variable}}(serviceContext{{#inargs}},
        {{#enum?}}{{#array?}}{{type}}.valueOf((Integer[])inputArguments[{{index}}].getValue()){{/array?}}{{^array?}}{{type}}.valueOf(inputArguments[{{index}}].intValue()){{/array?}}{{/enum?}}{{^enum?}}({{type}}{{#array?}}[]{{/array?}}) inputArguments[{{index}}].getValue(){{/enum?}}
        {{/inargs}});
      {{#no-outargs?}}
      return null;
      {{/no-outargs?}}
      {{^no-outargs?}}
      return new Variant[] { {{#one-outarg?}}
        new Variant(returnValue){{/one-outarg?}}{{#many-outargs?}}{{#outargs}}
        new Variant(returnValue[{{index}}]){{^last?}},{{/last?}}{{/outargs}}{{/many-outargs?}}
      };
      {{/no-outargs?}}
    }
    {{/methods}}
    return super.callMethod(serviceContext, methodId, inputArguments, inputArgumentResults, inputArgumentDiagnosticInfos);
  }
  
  {{/methods?}}
  {{#methods}}
  @Override
  public {{return-value}} {{> variable}}({{#inargs}}{{type}}{{#array?}}[]{{/array?}} {{> variable}}{{^last?}}, {{/last?}}{{/inargs}}) throws StatusException {
    {{^no-outargs?}}return {{/no-outargs?}}on{{> Variable}}(ServiceContext.INTERNAL_OPERATION_CONTEXT{{#inargs}}, {{> variable}}{{/inargs}});
  }

  protected abstract {{return-value}} on{{> Variable}}(ServiceContext serviceContext{{#inargs}}, {{type}}{{#array?}}[]{{/array?}} {{> variable}}{{/inargs}}) throws StatusException;
  {{/methods}}
}
