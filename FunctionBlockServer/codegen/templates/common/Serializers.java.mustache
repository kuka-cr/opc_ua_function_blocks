{:targets [:Structure]
 :many-to-one? true}
---
/**
* Prosys OPC UA Java SDK
*
* Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
* All rights reserved.
*/

/**
* DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package {{package}};

import org.opcfoundation.ua.builtintypes.ExpandedNodeId;
import org.opcfoundation.ua.encoding.DecodingException;
import org.opcfoundation.ua.encoding.EncodingException;
import org.opcfoundation.ua.encoding.IDecoder;
import org.opcfoundation.ua.encoding.IEncodeable;
import org.opcfoundation.ua.encoding.IEncoder;
import org.opcfoundation.ua.encoding.binary.IEncodeableSerializer;

import com.prosysopc.ua.StructureSerializer;

public class {{classname}} {
	{{#types}}
	public static class {{classname}}Serializer extends {{supertype.type}}Serializer  {

		public {{classname}}Serializer(Class<? extends IEncodeable> clazz,
				ExpandedNodeId binaryId, ExpandedNodeId xmlId) {
			super(clazz, binaryId, xmlId);
		}
		
		@Override
		public void calcEncodeable(IEncodeable encodeable, IEncoder calculator) 
				throws EncodingException {
			super.calcEncodeable(encodeable, calculator);
			{{classname}} obj = ({{classname}}) encodeable;
			{{#fields}}
			calculator.put(null, (obj == null) ? null : obj.get{{name}}(), {{^datatype.primitive?}}{{datatype.package}}.{{/datatype.primitive?}}{{> datatype_type}}.class);
			{{/fields}}
		}
		
		@Override
		public void getEncodeable(IDecoder decoder, IEncodeable encodeable)
				throws DecodingException {
			{{classname}} result = ({{classname}}) encodeable;
			super.getEncodeable(decoder, result);
			{{#fields}}
			result.set{{name}}(decoder.get("{{name}}", {{^datatype.primitive?}}{{datatype.package}}.{{/datatype.primitive?}}{{> datatype_type}}.class));
			{{/fields}}
		}
		
		@Override
		public IEncodeable newEncodeable() {
			return new {{classname}}();
		}
		
		@Override
		public void putEncodeable(IEncodeable encodeable, IEncoder encoder) 
				throws EncodingException {
			super.putEncodeable(encodeable, encoder);
			{{classname}} obj = ({{classname}}) encodeable;
			{{#fields}}
			encoder.put("{{name}}", (obj == null) ? null : obj.get{{name}}(), {{^datatype.primitive?}}{{datatype.package}}.{{/datatype.primitive?}}{{> datatype_type}}.class);
			{{/fields}}
		}
	};
	{{/types}}
    
	public static final IEncodeableSerializer[] SERIALIZERS = {
	{{#types}}
			new {{classname}}Serializer({{classname}}.class,
					{{classname}}.BINARY, {{classname}}.XML){{^last?}},{{/last?}}
	{{/types}}
	};
}
