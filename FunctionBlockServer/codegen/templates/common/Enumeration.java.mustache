{:targets [:Enumeration]}
---
/**
* Prosys OPC UA Java SDK
*
* Copyright (c) Prosys PMS Ltd., http://www.prosysopc.com.
* All rights reserved.
*/

/**
* DO NOT EDIT THIS FILE DIRECTLY! It is generated and will be overwritten on regeneration.
*/

package {{package}};

{{#dependencies}}
import {{package}}.{{class}};
{{/dependencies}}

{{#description?}}
    /**
	{{#description}}
        * {{.}}
	{{/description}}
    */
{{/description?}}
@TypeDefinitionId("nsu={{nodeid.namespace}};{{nodeid.id}}")
public enum {{classname}} implements Enumeration {
	{{#fields}}
	/**
	 * {{description}}
	 */
	{{name}}({{value}}){{#last?}};{{/last?}}{{^last?}},{{/last?}}

	{{/fields}}
	public static EnumSet<{{classname}}> NONE = EnumSet.noneOf( {{classname}}.class );
	public static EnumSet<{{classname}}> ALL = EnumSet.allOf( {{classname}}.class );

	private final int value;

	{{classname}}(int value) {
		this.value = value;
	}

	@Override
	public int getValue() {
		return value;
	}

	private static final Map<Integer, {{classname}}> map;

	static {
        map = new HashMap<Integer, {{classname}}>();
        for ({{classname}} i : {{classname}}.values())
        	map.put(i.value, i);
	}

	public static {{classname}} valueOf(int value) {
		return map.get(value);
	}

	public static {{classname}} valueOf(Integer value)
	{
		return value == null ? null : valueOf(value.intValue());
	}

	public static {{classname}} valueOf(UnsignedInteger value)
	{
		return value == null ? null : valueOf(value.intValue());
	}

	public static {{classname}}[] valueOf(int[] value)
	{
		{{classname}}[] result = new {{classname}}[value.length];
		for(int i=0; i<value.length; i++)
			result[i] = valueOf(value[i]);
		return result;
	}

	public static {{classname}}[] valueOf(Integer[] value)
	{
		{{classname}}[] result = new {{classname}}[value.length];
		for(int i=0; i<value.length; i++)
			result[i] = valueOf(value[i]);
		return result;
	}
	
	public static {{classname}}[] valueOf(UnsignedInteger[] value)
	{
		{{classname}}[] result = new {{classname}}[value.length];
		for(int i=0; i<value.length; i++)
			result[i] = valueOf(value[i]);
		return result;
	}

	public static UnsignedInteger getMask({{classname}}...list) {
        int result = 0;
        for ({{classname}} c : list)
        	result |= c.value;
        return UnsignedInteger.getFromBits(result);
	}

	public static UnsignedInteger getMask(Collection<{{classname}}> list) {
		int result = 0;
		for ({{classname}} c : list)
			result |= c.value;
		return UnsignedInteger.getFromBits(result);
	}

	public static EnumSet<{{classname}}> getSet(UnsignedInteger mask) {
		return getSet(mask.intValue());
	}

	public static EnumSet<{{classname}}> getSet(int mask) {
		List<{{classname}}> res = new ArrayList<{{classname}}>();
		for ({{classname}} l : {{classname}}.values())
			if ( (mask & l.value) == l.value )
				res.add(l);
		return EnumSet.copyOf(res);
	}
}
